<template>
    <div class="index-lists">
        <el-card class="!border-none" shadow="never">
            <el-form ref="formRef" class="mb-[-16px]" :model="queryParams" :inline="true">
            #foreach ($column in $columns)
            #if($column.isQuery==1)
                #if($column.htmlType=="datetime")
                <el-form-item label="${column.columnComment}" prop="${column.javaField}">
                    <data-picker
                        v-model:startTime="queryParams.startTime"
                        v-model:endTime="queryParams.endTime"
                    />
                </el-form-item>
                #elseif($column.htmlType=="select")
                <el-form-item label="${column.columnComment}" prop="${column.javaField}">
                    <el-select
                        v-model="queryParams.${column.javaField}"
                        class="w-56"
                        clearable
                    >
                        #if($column.dictType=="")
                        <el-option label="请选择字典生成" value="" />
                        #else
                        <el-option label="全部" value="" />
                        <el-option
                            v-for="(item, index) in dictData.${column.dictType}"
                            :key="index"
                            :label="item.name"
                            :value="item.value"
                        />
                        #end
                    </el-select>
                </el-form-item>
                #elseif($column.htmlType=="input")
                <el-form-item label="${column.columnComment}" prop="${column.javaField}">
                    <el-input class="w-56" v-model="queryParams.${column.javaField}" />
                </el-form-item>
                #end
            #end
            #end
                <el-form-item>
                    <el-button type="primary" @click="resetPage">查询</el-button>
                    <el-button @click="resetParams">重置</el-button>
                </el-form-item>
            </el-form>
        </el-card>
        <el-card class="!border-none mt-4" shadow="never">
            <div>
                <el-button v-perms="['${moduleName}:add']" type="primary" @click="handleAdd()">
                    <template #icon>
                        <icon name="el-icon-Plus" />
                    </template>
                    新增
                </el-button>
                 <el-button
                    v-perms="['${moduleName}:del']"
                    :disabled="!selectData.length"
                    type="danger"
                    @click="handleDelete(selectData)"
                >
                    <template #icon>
                        <icon name="el-icon-Delete" />
                    </template>
                    删除
                </el-button>
            </div>
            <el-table class="mt-4"
                size="large"
                v-loading="pager.loading"
                :data="pager.lists"
                @selection-change="handleSelectionChange"
            >
            #foreach ($column in $columns)
            #if($column.isList)
                #if($column.htmlType=="select" || $column.htmlType=="radio" || $column.htmlType=="checkbox")
                <el-table-column label="${column.columnComment}" prop="${column.javaField}" min-width="100">
                    <template #default="{ row }">
                        <dict-value :options="dictData.${column.dictType}" :value="row.${column.javaField}" />
                    </template>
                </el-table-column>
                #elseif($column.htmlType=="imageUpload")
                <el-table-column label="${column.columnComment}" prop="${column.javaField}" min-width="60">
                    <template #default="{ row }">
                        <image-contain width="50px" height="50px" :src="row.${column.javaField}" />
                    </template>
                </el-table-column>
                #else
                <el-table-column label="${column.columnComment}" prop="${column.javaField}" min-width="100" />
                #end
            #end
            #end
                <el-table-column label="操作" width="120" fixed="right">
                    <template #default="{ row }">
                        <el-button
                            v-perms="['${moduleName}:edit']"
                            type="primary"
                            link
                            @click="handleEdit(row)"
                        >
                            编辑
                        </el-button>
                        <el-button
                            v-perms="['${moduleName}:del']"
                            type="danger"
                            link
                            @click="handleDelete(row.${primaryKey})"
                        >
                            删除
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
            <div class="flex justify-end mt-4">
                <pagination v-model="pager" @change="getLists" />
            </div>
        </el-card>
        <edit-popup
            v-if="showEdit"
            ref="editRef"
            :dict-data="dictData"
            @success="getLists"
            @close="showEdit = false"
        />
    </div>
</template>
<script lang="ts" setup>
    import { ${moduleName}Delete, ${moduleName}Lists } from '@/api/${moduleName}'
    import { useDictData } from '@/hooks/useDictOptions'
    import { usePaging } from '@/hooks/usePaging'
    import feedback from '@/utils/feedback'
    import EditPopup from './edit.vue'
    const editRef = shallowRef<InstanceType<typeof EditPopup>>()
    const showEdit = ref(false)
    const queryParams = reactive({
        #foreach ($column in $columns)
        #if($column.isQuery)
        ${column.javaField}: '',
        #end
        #end
    })

    const { pager, getLists, resetPage, resetParams } = usePaging({
        fetchFun: ${moduleName}Lists,
        params: queryParams
    })

    #if($dictFields!="")
    const { dictData } = useDictData<{
        #foreach ($column in $columns)
        #if($column.dictType!="")
        ${column.dictType}: any[]
        #end
        #end
    }>([${dictFields}])
    #end

    const selectData = ref<any[]>([])
    const handleSelectionChange = (selection: any[]) => {
        selectData.value = selection.map(item => item.${primaryKey})
    }

    const handleAdd = async () => {
        showEdit.value = true
        await nextTick()
        editRef.value?.open('add')
    }

    const handleEdit = async (data: any) => {
        showEdit.value = true
        await nextTick()
        editRef.value?.open('edit')
        editRef.value?.setFormData(data)
    }

    const handleDelete = async (${primaryKey}: number || number[]) => {
        await ${moduleName}Delete({ ${primaryKey} })
        feedback.msgSuccess('删除成功')
        getLists()
    }

    getLists()
</script>
