<template>
    <div>
        <el-card class="!border-none mb-4" shadow="never">
            <el-form
                    class="mb-[-16px]"
                    :model="queryParams"
                    inline
            >
            #foreach ($column in $columns)
            #if($column.isQuery==1)
                <el-form-item label="${column.columnComment}" prop="type">
                    <el-input class="w-56" v-model="queryParams.${column.javaField}" clearable placeholder="请输入${column.columnComment}" />
                </el-form-item>
            #end
            #end
                <el-form-item>
                    <el-button type="primary" @click="resetPage">查询</el-button>
                    <el-button @click="resetParams">重置</el-button>
                </el-form-item>
            </el-form>
        </el-card>

        <el-card class="!border-none" v-loading="pager.loading" shadow="never">
            <el-button v-perms="['config/add']" type="primary" @click="handleAdd">
                <template #icon>
                    <icon name="el-icon-Plus" />
                </template>
                新增
            </el-button>
            <el-button
                    v-perms="['config/delete']"
                    :disabled="!selectData.length"
                    @click="handleDelete(selectData)"
            >
                删除
            </el-button>
            <div class="mt-4">
                <el-table :data="pager.lists" @selection-change="handleSelectionChange">
                    <el-table-column type="selection" width="55" />
                #foreach ($column in $columns)
                #if($column.isList==1)
                    <el-table-column label="${column.columnComment}" prop="${column.javaField}" />
                #end
                #end
                    <el-table-column label="操作" width="120" fixed="right">
                        <template #default="{ row }">
                            <el-button
                                    v-perms="['config/edit']"
                                    type="primary"
                                    link
                                    @click="handleEdit(row)"
                            >
                                编辑
                            </el-button>
                            <el-button
                                    v-perms="['config/delete']"
                                    type="danger"
                                    link
                                    @click="handleDelete(row.id)"
                            >
                                删除
                            </el-button>
                        </template>
                    </el-table-column>
                </el-table>
            </div>
            <div class="flex mt-4 justify-end">
                <pagination v-model="pager" @change="getLists" />
            </div>
        </el-card>

        <edit-popup v-if="showEdit" ref="editRef" @success="getLists" @close="showEdit = false" />
    </div>
</template>

<script lang="ts" setup>
    import { usePaging } from '@/hooks/usePaging'
    import { dictDataLists } from '@/api/setting/dict'
    import { apiConfigLists, apiConfigDelete } from '@/api/config'
    import { timeFormat } from '@/utils/util'
    import feedback from '@/utils/feedback'
    import EditPopup from './edit.vue'

    const editRef = shallowRef<InstanceType<typeof EditPopup>>()
    // 是否显示编辑框
    const showEdit = ref(false)


    // 查询条件
    const queryParams = reactive({
        type: '',
        name: '',
        value: ''
    })

    // 选中数据
    const selectData = ref<any[]>([])

    // 表格选择后回调事件
    const handleSelectionChange = (val: any[]) => {
        selectData.value = val.map(({ id }) => id)
    }

    // 字典数据
    const dictData = reactive<Record<string, any[]>>({

    })

    // 获取字典数据
    const getDictData = () => {

    }

    // 分页相关
    const { pager, getLists, resetParams, resetPage } = usePaging({
        fetchFun: apiConfigLists,
        params: queryParams
    })

    // 添加
    const handleAdd = async () => {
        showEdit.value = true
        await nextTick()
        editRef.value?.open('add')
    }

    // 编辑
    const handleEdit = async (data: any) => {
        showEdit.value = true
        await nextTick()
        editRef.value?.open('edit')
        editRef.value?.setFormData(data)
    }

    // 删除
    const handleDelete = async (id: number | any[]) => {
        await feedback.confirm('确定要删除？')
        await apiConfigDelete({ id })
        getLists()
    }

    getLists()
    getDictData()
</script>

